import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from datetime import datetime, timedelta

API_TOKEN = '7863880912:AAGeVZrF23r41XW5lgrgOMiHyR_m76rJVAA'

logging.basicConfig(level=logging.INFO)

def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY, 
    full_name TEXT,
    phone TEXT
    )
    ''')
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã visits, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('DROP TABLE IF EXISTS visits')
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã visits —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS visits (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    visit_category TEXT,
    target_name TEXT,
    spec_or_position TEXT,
    organization TEXT,
    location_text TEXT,  -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –∏ —Ä–∞–π–æ–Ω–∞
    visit_topic TEXT,
    visit_result TEXT,
    latitude REAL,
    longitude REAL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()

init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class AuthStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_name = State()
    waiting_for_phone = State()

class VisitRegistrationStates(StatesGroup):
    choosing_category = State()
    waiting_for_name = State()
    waiting_for_spec_or_position = State()
    waiting_for_organization = State()
    waiting_for_location_text = State()
    waiting_for_topic = State()
    waiting_for_result = State()
    waiting_for_location = State()

class SettingsStates(StatesGroup):
    choosing_option = State()
    waiting_for_new_full_name = State()
    waiting_for_new_phone = State()

main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
    [KeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç")],
    [KeyboardButton(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")],
    [KeyboardButton(text="üì¢ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")],
    [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö")],
    [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

location_keyboard = ReplyKeyboardMarkup(
    keyboard=[
    [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
    [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
    await state.set_state(AuthStates.waiting_for_code)

@dp.message(AuthStates.waiting_for_code)
async def code_handler(message: types.Message, state: FSMContext):
    if message.text == "12051993":
        await message.answer("–ö–æ–¥ –≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û:")
        await state.set_state(AuthStates.waiting_for_name)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

@dp.message(AuthStates.waiting_for_name)
async def name_handler(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(AuthStates.waiting_for_phone)

@dp.message(AuthStates.waiting_for_phone)
async def phone_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = user_data.get("full_name")
    phone = message.text
    user_id = message.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT OR REPLACE INTO users (user_id, full_name, phone)
    VALUES (?, ?, ?)
    ''', (user_id, full_name, phone))
    conn.commit()
    conn.close()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑–∏—Ç–æ–≤
@dp.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç")
async def register_visit_handler(message: types.Message, state: FSMContext):
    visit_keyboard = ReplyKeyboardMarkup(
    keyboard=[
    [KeyboardButton(text="üë®‚Äç‚öïÔ∏è –í—Ä–∞—á")],
    [KeyboardButton(text="üè• –ê–ø—Ç–µ–∫–∞")],
    [KeyboardButton(text="üì¶ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä")],
    [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∑–∏—Ç–∞:", reply_markup=visit_keyboard)
    await state.set_state(VisitRegistrationStates.choosing_category)

@dp.message(VisitRegistrationStates.choosing_category)
async def process_category_selection(message: types.Message, state: FSMContext):
    if message.text not in ["üë®‚Äç‚öïÔ∏è –í—Ä–∞—á", "üè• –ê–ø—Ç–µ–∫–∞", "üì¶ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return
    await state.update_data(visit_category=message.text)
    if message.text == "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤—Ä–∞—á–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(VisitRegistrationStates.waiting_for_name)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(VisitRegistrationStates.waiting_for_spec_or_position)

@dp.message(VisitRegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(target_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞:")
    await state.set_state(VisitRegistrationStates.waiting_for_spec_or_position)

@dp.message(VisitRegistrationStates.waiting_for_spec_or_position)
async def process_spec_or_position(message: types.Message, state: FSMContext):
    await state.update_data(spec_or_position=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:")
    await state.set_state(VisitRegistrationStates.waiting_for_organization)

@dp.message(VisitRegistrationStates.waiting_for_organization)
async def process_organization(message: types.Message, state: FSMContext):
    await state.update_data(organization=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω):")
    await state.set_state(VisitRegistrationStates.waiting_for_location_text)

@dp.message(VisitRegistrationStates.waiting_for_location_text)
async def process_location_text(message: types.Message, state: FSMContext):
    await state.update_data(location_text=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–∏–∑–∏—Ç–∞:")
    await state.set_state(VisitRegistrationStates.waiting_for_topic)

@dp.message(VisitRegistrationStates.waiting_for_topic)
async def process_topic(message: types.Message, state: FSMContext):
    await state.update_data(visit_topic=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑–∏—Ç–∞:")
    await state.set_state(VisitRegistrationStates.waiting_for_result)

@dp.message(VisitRegistrationStates.waiting_for_result)
async def process_result(message: types.Message, state: FSMContext):
    await state.update_data(visit_result=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
    await state.set_state(VisitRegistrationStates.waiting_for_location)

@dp.message(VisitRegistrationStates.waiting_for_location, F.location)
async def process_location(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('''
    INSERT INTO visits (
    user_id, visit_category, target_name, spec_or_position, 
    organization, location_text, visit_topic, visit_result, latitude, longitude
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
    message.from_user.id,
    user_data.get("visit_category"),
    user_data.get("target_name", None),  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–∞—á–µ–π
    user_data.get("spec_or_position"),
    user_data.get("organization"),
    user_data.get("location_text"),
    user_data.get("visit_topic"),
    user_data.get("visit_result"),
    message.location.latitude,
    message.location.longitude
    ))
        conn.commit()
        await message.answer("‚úÖ –í–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_menu_keyboard)
    except Exception as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_menu_keyboard)
    finally:
        conn.close()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
@dp.message(F.text == "üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
async def report_menu_handler(message: types.Message):
    report_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", reply_markup=report_keyboard)

@dp.message(F.text == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è")
async def report_today_handler(message: types.Message):
    user_id = message.from_user.id
    today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    today_end = datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT visit_category, target_name, organization, spec_or_position, visit_result, latitude, longitude 
        FROM visits 
        WHERE user_id = ? AND timestamp BETWEEN ? AND ?
    ''', (user_id, today_start, today_end))
    visits = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_text = "*–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
    doctors_data = []
    pharmacy_distributor_data = []

    for visit in visits:
        category, target_name, organization, spec_or_position, visit_result, latitude, longitude = visit
        location = f"üìç –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}" if latitude and longitude else "üìç –õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        visit_info = (
            f"   üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}\n"
            f"   üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å/–î–æ–ª–∂–Ω–æ—Å—Ç—å: {spec_or_position}\n"
            f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑–∏—Ç–∞: {visit_result}\n"
            f"   {location}\n"
        )
        if category == "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á":
            doctors_data.append(f"üë®‚Äç‚öïÔ∏è *–§–ò–û –≤—Ä–∞—á–∞:* {target_name}\n{visit_info}")
        elif category in ["üè• –ê–ø—Ç–µ–∫–∞", "üì¶ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä"]:
            pharmacy_distributor_data.append(f"üè•/üì¶ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:* {organization}\n{visit_info}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ä–∞—á–µ–π
    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏*\n"
    if doctors_data:
        report_text += "\n".join(doctors_data)
    else:
        report_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –∫ –≤—Ä–∞—á–∞–º.\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–ø—Ç–µ–∫/–¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤
    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "üè•/üì¶ *–ê–ø—Ç–µ–∫–∏/–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã*\n"
    if pharmacy_distributor_data:
        report_text += "\n".join(pharmacy_distributor_data)
    else:
        report_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –∫ –∞–ø—Ç–µ–∫–∞–º/–¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞–º.\n"

    # –î–æ–±–∞–≤–ª—è–µ–º % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    total_doctors = len(doctors_data)
    total_pharmacy_distributor = len(pharmacy_distributor_data)

    min_doctor_plan = 8
    max_doctor_plan = 12
    min_pharmacy_distributor_plan = 6
    max_pharmacy_distributor_plan = 10

    doctor_min_percent = (total_doctors / min_doctor_plan) * 100 if total_doctors <= min_doctor_plan else 100
    doctor_max_percent = (total_doctors / max_doctor_plan) * 100 if total_doctors <= max_doctor_plan else 100

    pharmacy_distributor_min_percent = (total_pharmacy_distributor / min_pharmacy_distributor_plan) * 100 if total_pharmacy_distributor <= min_pharmacy_distributor_plan else 100
    pharmacy_distributor_max_percent = (total_pharmacy_distributor / max_pharmacy_distributor_plan) * 100 if total_pharmacy_distributor <= max_pharmacy_distributor_plan else 100

    total_visits = total_doctors + total_pharmacy_distributor
    total_min_plan = min_doctor_plan + min_pharmacy_distributor_plan
    total_max_plan = max_doctor_plan + max_pharmacy_distributor_plan

    total_min_percent = (total_visits / total_min_plan) * 100 if total_visits <= total_min_plan else 100
    total_max_percent = (total_visits / total_max_plan) * 100 if total_visits <= total_max_plan else 100

    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "*–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:*\n"
    report_text += (
        f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_doctors}/{min_doctor_plan} - *{doctor_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_doctors}/{max_doctor_plan} - *{doctor_max_percent:.2f}%*\n\n"
        f"üè•/üì¶ –ê–ø—Ç–µ–∫–∏/–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_pharmacy_distributor}/{min_pharmacy_distributor_plan} - *{pharmacy_distributor_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_pharmacy_distributor}/{max_pharmacy_distributor_plan} - *{pharmacy_distributor_max_percent:.2f}%*\n\n"
        f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_visits}/{total_min_plan} - *{total_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_visits}/{total_max_plan} - *{total_max_percent:.2f}%*\n"
    )

    await message.answer(report_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")

@dp.message(F.text == "–ó–∞ –Ω–µ–¥–µ–ª—é")
async def report_week_handler(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now()
    start_of_week = today - timedelta(days=today.weekday())  # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    end_of_week = today

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT visit_category, target_name, organization, spec_or_position, visit_result, latitude, longitude 
        FROM visits 
        WHERE user_id = ? AND timestamp BETWEEN ? AND ?
    ''', (user_id, start_of_week, end_of_week))
    visits = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_text = "*–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
    doctors_data = []
    pharmacy_distributor_data = []

    for visit in visits:
        category, target_name, organization, spec_or_position, visit_result, latitude, longitude = visit
        location = f"üìç –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}" if latitude and longitude else "üìç –õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        visit_info = (
            f"   üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}\n"
            f"   üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å/–î–æ–ª–∂–Ω–æ—Å—Ç—å: {spec_or_position}\n"
            f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑–∏—Ç–∞: {visit_result}\n"
            f"   {location}\n"
        )
        if category == "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á":
            doctors_data.append(f"üë®‚Äç‚öïÔ∏è *–§–ò–û –≤—Ä–∞—á–∞:* {target_name}\n{visit_info}")
        elif category in ["üè• –ê–ø—Ç–µ–∫–∞", "üì¶ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä"]:
            pharmacy_distributor_data.append(f"üè•/üì¶ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:* {organization}\n{visit_info}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ä–∞—á–µ–π
    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏*\n"
    if doctors_data:
        report_text += "\n".join(doctors_data)
    else:
        report_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –∫ –≤—Ä–∞—á–∞–º.\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–ø—Ç–µ–∫/–¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤
    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "üè•/üì¶ *–ê–ø—Ç–µ–∫–∏/–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã*\n"
    if pharmacy_distributor_data:
        report_text += "\n".join(pharmacy_distributor_data)
    else:
        report_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –∫ –∞–ø—Ç–µ–∫–∞–º/–¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞–º.\n"

    # –î–æ–±–∞–≤–ª—è–µ–º % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    total_doctors = len(doctors_data)
    total_pharmacy_distributor = len(pharmacy_distributor_data)

    min_doctor_plan = 40
    max_doctor_plan = 60
    min_pharmacy_distributor_plan = 30
    max_pharmacy_distributor_plan = 50

    doctor_min_percent = (total_doctors / min_doctor_plan) * 100 if total_doctors <= min_doctor_plan else 100
    doctor_max_percent = (total_doctors / max_doctor_plan) * 100 if total_doctors <= max_doctor_plan else 100

    pharmacy_distributor_min_percent = (total_pharmacy_distributor / min_pharmacy_distributor_plan) * 100 if total_pharmacy_distributor <= min_pharmacy_distributor_plan else 100
    pharmacy_distributor_max_percent = (total_pharmacy_distributor / max_pharmacy_distributor_plan) * 100 if total_pharmacy_distributor <= max_pharmacy_distributor_plan else 100

    total_visits = total_doctors + total_pharmacy_distributor
    total_min_plan = min_doctor_plan + min_pharmacy_distributor_plan
    total_max_plan = max_doctor_plan + max_pharmacy_distributor_plan

    total_min_percent = (total_visits / total_min_plan) * 100 if total_visits <= total_min_plan else 100
    total_max_percent = (total_visits / total_max_plan) * 100 if total_visits <= total_max_plan else 100

    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "*–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:*\n"
    report_text += (
        f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_doctors}/{min_doctor_plan} - *{doctor_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_doctors}/{max_doctor_plan} - *{doctor_max_percent:.2f}%*\n\n"
        f"üè•/üì¶ –ê–ø—Ç–µ–∫–∏/–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_pharmacy_distributor}/{min_pharmacy_distributor_plan} - *{pharmacy_distributor_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_pharmacy_distributor}/{max_pharmacy_distributor_plan} - *{pharmacy_distributor_max_percent:.2f}%*\n\n"
        f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_visits}/{total_min_plan} - *{total_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_visits}/{total_max_plan} - *{total_max_percent:.2f}%*\n"
    )

    await message.answer(report_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")

@dp.message(F.text == "–ó–∞ –º–µ—Å—è—Ü")
async def report_month_handler(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now()
    start_of_month = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    end_of_month = today

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT visit_category, target_name, organization, spec_or_position, visit_result, latitude, longitude 
        FROM visits 
        WHERE user_id = ? AND timestamp BETWEEN ? AND ?
    ''', (user_id, start_of_month, end_of_month))
    visits = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_text = "*–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü:*\n"
    doctors_data = []
    pharmacy_distributor_data = []

    for visit in visits:
        category, target_name, organization, spec_or_position, visit_result, latitude, longitude = visit
        location = f"üìç –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}" if latitude and longitude else "üìç –õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        visit_info = (
            f"   üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}\n"
            f"   üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å/–î–æ–ª–∂–Ω–æ—Å—Ç—å: {spec_or_position}\n"
            f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑–∏—Ç–∞: {visit_result}\n"
            f"   {location}\n"
        )
        if category == "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á":
            doctors_data.append(f"üë®‚Äç‚öïÔ∏è *–§–ò–û –≤—Ä–∞—á–∞:* {target_name}\n{visit_info}")
        elif category in ["üè• –ê–ø—Ç–µ–∫–∞", "üì¶ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä"]:
            pharmacy_distributor_data.append(f"üè•/üì¶ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:* {organization}\n{visit_info}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ä–∞—á–µ–π
    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏*\n"
    if doctors_data:
        report_text += "\n".join(doctors_data)
    else:
        report_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –∫ –≤—Ä–∞—á–∞–º.\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–ø—Ç–µ–∫/–¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤
    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "üè•/üì¶ *–ê–ø—Ç–µ–∫–∏/–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã*\n"
    if pharmacy_distributor_data:
        report_text += "\n".join(pharmacy_distributor_data)
    else:
        report_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –∫ –∞–ø—Ç–µ–∫–∞–º/–¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞–º.\n"

    # –î–æ–±–∞–≤–ª—è–µ–º % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    total_doctors = len(doctors_data)
    total_pharmacy_distributor = len(pharmacy_distributor_data)

    min_doctor_plan = 160
    max_doctor_plan = 240
    min_pharmacy_distributor_plan = 120
    max_pharmacy_distributor_plan = 200

    doctor_min_percent = (total_doctors / min_doctor_plan) * 100 if total_doctors <= min_doctor_plan else 100
    doctor_max_percent = (total_doctors / max_doctor_plan) * 100 if total_doctors <= max_doctor_plan else 100

    pharmacy_distributor_min_percent = (total_pharmacy_distributor / min_pharmacy_distributor_plan) * 100 if total_pharmacy_distributor <= min_pharmacy_distributor_plan else 100
    pharmacy_distributor_max_percent = (total_pharmacy_distributor / max_pharmacy_distributor_plan) * 100 if total_pharmacy_distributor <= max_pharmacy_distributor_plan else 100

    total_visits = total_doctors + total_pharmacy_distributor
    total_min_plan = min_doctor_plan + min_pharmacy_distributor_plan
    total_max_plan = max_doctor_plan + max_pharmacy_distributor_plan

    total_min_percent = (total_visits / total_min_plan) * 100 if total_visits <= total_min_plan else 100
    total_max_percent = (total_visits / total_max_plan) * 100 if total_visits <= total_max_plan else 100

    report_text += "\n*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*\n"
    report_text += "*–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:*\n"
    report_text += (
        f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_doctors}/{min_doctor_plan} - *{doctor_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_doctors}/{max_doctor_plan} - *{doctor_max_percent:.2f}%*\n\n"
        f"üè•/üì¶ –ê–ø—Ç–µ–∫–∏/–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_pharmacy_distributor}/{min_pharmacy_distributor_plan} - *{pharmacy_distributor_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_pharmacy_distributor}/{max_pharmacy_distributor_plan} - *{pharmacy_distributor_max_percent:.2f}%*\n\n"
        f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:\n"
        f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_visits}/{total_min_plan} - *{total_min_percent:.2f}%*\n"
        f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {total_visits}/{total_max_plan} - *{total_max_percent:.2f}%*\n"
    )

    await message.answer(report_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())