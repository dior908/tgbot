import asyncio
import logging
import sqlite3

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

API_TOKEN = '7863880912:AAGeVZrF23r41XW5lgrgOMiHyR_m76rJVAA'

logging.basicConfig(level=logging.INFO)


def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY, 
            full_name TEXT,
            phone TEXT
        )
    ''')

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã visits, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('DROP TABLE IF EXISTS visits')

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã visits —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS visits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            visit_category TEXT,
            target_name TEXT,
            spec_or_position TEXT,
            organization TEXT,
            location_text TEXT,  -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –∏ —Ä–∞–π–æ–Ω–∞
            visit_topic TEXT,
            visit_result TEXT,
            latitude REAL,
            longitude REAL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()


init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


class AuthStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_name = State()
    waiting_for_phone = State()


class VisitRegistrationStates(StatesGroup):
    choosing_category = State()
    waiting_for_name = State()
    waiting_for_spec_or_position = State()
    waiting_for_organization = State()
    waiting_for_location_text = State()
    waiting_for_topic = State()
    waiting_for_result = State()
    waiting_for_location = State()


class SettingsStates(StatesGroup):
    choosing_option = State()
    waiting_for_new_full_name = State()
    waiting_for_new_phone = State()


main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç")],
        [KeyboardButton(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üì¢ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

location_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
    await state.set_state(AuthStates.waiting_for_code)


@dp.message(AuthStates.waiting_for_code)
async def code_handler(message: types.Message, state: FSMContext):
    if message.text == "12051993":
        await message.answer("–ö–æ–¥ –≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û:")
        await state.set_state(AuthStates.waiting_for_name)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")


@dp.message(AuthStates.waiting_for_name)
async def name_handler(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(AuthStates.waiting_for_phone)


@dp.message(AuthStates.waiting_for_phone)
async def phone_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = user_data.get("full_name")
    phone = message.text
    user_id = message.from_user.id

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, full_name, phone)
        VALUES (?, ?, ?)
    ''', (user_id, full_name, phone))
    conn.commit()
    conn.close()

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑–∏—Ç–æ–≤
@dp.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç")
async def register_visit_handler(message: types.Message, state: FSMContext):
    visit_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë®‚Äç‚öïÔ∏è –í—Ä–∞—á")],
            [KeyboardButton(text="üè• –ê–ø—Ç–µ–∫–∞")],
            [KeyboardButton(text="üì¶ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∑–∏—Ç–∞:", reply_markup=visit_keyboard)
    await state.set_state(VisitRegistrationStates.choosing_category)


@dp.message(VisitRegistrationStates.choosing_category)
async def process_category_selection(message: types.Message, state: FSMContext):
    if message.text not in ["üë®‚Äç‚öïÔ∏è –í—Ä–∞—á", "üè• –ê–ø—Ç–µ–∫–∞", "üì¶ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return

    await state.update_data(visit_category=message.text)

    if message.text == "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤—Ä–∞—á–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(VisitRegistrationStates.waiting_for_name)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(VisitRegistrationStates.waiting_for_spec_or_position)


@dp.message(VisitRegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(target_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞:")
    await state.set_state(VisitRegistrationStates.waiting_for_spec_or_position)


@dp.message(VisitRegistrationStates.waiting_for_spec_or_position)
async def process_spec_or_position(message: types.Message, state: FSMContext):
    await state.update_data(spec_or_position=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:")
    await state.set_state(VisitRegistrationStates.waiting_for_organization)


@dp.message(VisitRegistrationStates.waiting_for_organization)
async def process_organization(message: types.Message, state: FSMContext):
    await state.update_data(organization=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω):")
    await state.set_state(VisitRegistrationStates.waiting_for_location_text)


@dp.message(VisitRegistrationStates.waiting_for_location_text)
async def process_location_text(message: types.Message, state: FSMContext):
    await state.update_data(location_text=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–∏–∑–∏—Ç–∞:")
    await state.set_state(VisitRegistrationStates.waiting_for_topic)


@dp.message(VisitRegistrationStates.waiting_for_topic)
async def process_topic(message: types.Message, state: FSMContext):
    await state.update_data(visit_topic=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑–∏—Ç–∞:")
    await state.set_state(VisitRegistrationStates.waiting_for_result)


@dp.message(VisitRegistrationStates.waiting_for_result)
async def process_result(message: types.Message, state: FSMContext):
    await state.update_data(visit_result=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
    await state.set_state(VisitRegistrationStates.waiting_for_location)


@dp.message(VisitRegistrationStates.waiting_for_location, F.location)
async def process_location(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    try:
        cursor.execute('''
            INSERT INTO visits (
                user_id, visit_category, target_name, spec_or_position, 
                organization, location_text, visit_topic, visit_result, latitude, longitude
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            message.from_user.id,
            user_data.get("visit_category"),
            user_data.get("target_name", None),  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–∞—á–µ–π
            user_data.get("spec_or_position"),
            user_data.get("organization"),
            user_data.get("location_text"),
            user_data.get("visit_topic"),
            user_data.get("visit_result"),
            message.location.latitude,
            message.location.longitude
        ))
        conn.commit()
        await message.answer("‚úÖ –í–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_menu_keyboard)
    except Exception as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_menu_keyboard)
    finally:
        conn.close()
        await state.clear()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
# (report_handler, promo_handler, settings_handler, help_handler –∏ —Ç.–¥.)

async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())